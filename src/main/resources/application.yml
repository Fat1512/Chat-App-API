spring:
  data:
    mongodb:
      uri: ${MONGO_URL}
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
  security:
    oauth2:
      client:
        registration:
          google:
            prefix-uri: https://accounts.google.com/o/oauth2/auth
            client-id: ${OAUTH_CLIENT_ID}
            client-secret: ${OAUTH_CLIENT_SECRET}
            redirect-uri: http://localhost:5173/auth/login/callback
            scope: https://www.googleapis.com/auth/userinfo.profile%20https://www.googleapis.com/auth/userinfo.email%20https://www.googleapis.com/auth/user.phonenumbers.read
#            scope: openid%20profile%20email&
            user-info-uri: https://people.googleapis.com/v1/people/me?personFields=emailAddresses,names,phoneNumbers,photos
  main:
    allow-bean-definition-overriding: true
  servlet:
    multipart:
      enabled: true
app:
  token:
    secret: fe60f199041040557dc61317117ad37f10d2352cc8f3ccc32abb11056f6a864b
    expirationTime: 200000
    refreshTime: 23123132
logging:
  level:
    org:
      springframework:
        data:
          mongodb:
            core:
              convert:
                MongoDatabaseFactoryReferenceLoader: TRACE
aws:
  access-key: ${ACCESS_KEY}
  secret-key: ${SECRET_KEY}
  bucket-name: ${BUCKET_NAME}
  url: ${S3_URL}
  region: ${AWS_REGION}
gemini:
  key: ${GEMINI_KEY}
frontend:
  url: ${FRONTEND_URL}
#server:
#  ssl:
#    key-store-type: PKCS12
#    key-store: './server-keystore.p12'
#    key-store-password: server-password
#    key-alias: server-key
#    enabled: false